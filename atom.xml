<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Moong2&#39;s Dev Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://leekeunhwan.github.io/"/>
  <updated>2018-07-31T09:03:53.508Z</updated>
  <id>https://leekeunhwan.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JSX란?</title>
    <link href="https://leekeunhwan.github.io/2018/07/30/JSX/"/>
    <id>https://leekeunhwan.github.io/2018/07/30/JSX/</id>
    <published>2018-07-30T12:49:53.000Z</published>
    <updated>2018-07-31T09:03:53.508Z</updated>
    
    <content type="html"><![CDATA[<h2>JSX 란?</h2><hr><p>JSX 는 자바스크립트의 확장문법으로 JSX 를 리액트와 함께 사용하면<br>UI 가 실제로 어떻게 보일지 서술할 수 있습니다.<br>JSX 는 템플릿 언어처럼 보일 수 있지만 템플릿 언어는 아닙니다.<br>JSX 는 React 요소를 만듭니다.</p><br><h2>왜 JSX 인가?</h2><hr><p>React 는 렌더링 로직이 다른 UI 로직과 본질적으로<br>결합되어 있다는 사실을 인정합니다.</p><p>즉, 이벤트의 처리 과정, 시간에 따른 상태 변화, 표시할 데이터가<br>어디로부터 오는지가 렌더링 로직과 결합되어 있다는 것입니다.</p><p>React 는 별도의 파일에 마크업과 로직을 넣어 기술 을 인위적으로 분리하는 대신,<br>둘 다 포함하는 “컴포넌트”라고 부르는 단위를 이용해 관심사를 분리 합니다.</p><p>React 를 사용하기 위해 반드시 JSX 를 사용해야 하는 것은 아닙니다만,<br>많은 사람들이 자바스크립트 코드 안에서 UI 작업을 할 때<br>시각적으로 더 편하다고 느끼고 있습니다.<br>또한 JSX 를 사용하면 React 가 유용한 에러 및 경고 메시지를 표시해줄 수 있습니다.</p><br><h2>JSX 에 표현식 포함하기</h2><hr><p>JSX 안에 자바스크립트 표현식 을 중괄호로 묶어서 포함시킬 수 있습니다.<br>(JSX 에서 중괄호를 쓰면 중괄호 안에서 자유롭게 자바스크립트를 다룰 수 있습니다.)<br><br>예를 들어, 2 + 2, user.firstName, formatName(user) 를<br>유효한 표현식으로 표현하면 아래와 같이 표현합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> user.firstName + <span class="string">" "</span> + user.lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  firstName: <span class="string">"Harper"</span>,</span><br><span class="line">  lastName: <span class="string">"Perez"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;formatName(user)&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(element, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br></pre></td></tr></table></figure><p>가독성을 좋게 하기 위해 JSX 를 여러줄로 나눴습니다.<br><br>필수는 아니지만, 이 작업을 수행할 때는 자동 세미콜론 삽입의 함정을 피하기 위해<br>괄호로 묶는 것이 좋습니다.</p><br><h2>JSX 또한 표현식이다</h2><hr><p>컴파일이 끝나면, JSX 표현식이 일반적인 자바스크립트 함수 호출이 되고,<br>결과적으로 자바스크립트 객체로 평가됩니다.<br>이 말은 if 문이나 for 문 내에서 JSX 를 사용할 수 있으며,<br>변수에 할당하거나 매개변수로 전달하거나 함수에서 반환할 수 있음을 의미합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGreeting</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (user) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;formatName(user)&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, Stranger.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2>JSX 어트리뷰트 정의</h2><hr><p>어트리뷰트에서 따옴표를 사용해서 문자열 리터럴을 정의할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">tabIndex</span>=<span class="string">"0"</span> /&gt;</span>;</span></span><br></pre></td></tr></table></figure><p>어트리뷰트에 중괄호를 사용하면, 자바스크립트 표현식을 포함시킬 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;user.avatarUrl&#125;</span> /&gt;</span>;</span></span><br></pre></td></tr></table></figure><p>어트리뷰트에 자바스크립트 표현식을 포함시킬 때 중괄호를 따옴표로 묶지 마세요.<br>따옴표 (문자열 값인 경우) 또는 중괄호 (표현식인 경우) 중 하나를 사용해야 하며,<br>하나의 어트리뷰트에 둘 다 사용할 수 있는 것이 아닙니다.</p><p><strong stlye="color:salmon">경고</strong></p><p>JSX 는 HTML 보다는 자바스크립트에 가깝기 때문에,<br>React DOM 은 HTML 어트리뷰트 이름 대신<br>camelCase 어트리뷰트 이름 컨벤션을 사용합니다.</p><p>예를 들어, JSX 에서 class 는 <code>className</code> 이 되며, tabindex 는 <code>tabIndex</code> 가 됩니다.</p><br><h3>예를 들면 이렇게</h3><table><thead><tr><th style="text-align:center">HTML Attribute</th><th style="text-align:center">HTML Example</th><th style="text-align:center">JSX Property</th><th style="text-align:center">JSX Example</th></tr></thead><tbody><tr><td style="text-align:center">class</td><td style="text-align:center"><code>&lt;div class='fancy'&gt;...&lt;/div&gt;</code></td><td style="text-align:center">className*</td><td style="text-align:center"><code>&lt;div className='fancy'&gt;...&lt;/div&gt;</code></td></tr><tr><td style="text-align:center">onclick</td><td style="text-align:center"><code>&lt;button onclick=&quot;foo()&quot;&gt;...</code></td><td style="text-align:center">onClick*</td><td style="text-align:center"><code>&lt;button onClick={foo}&gt;...</code><br><code>&lt;button onClick={() =&gt; foo(param)}&gt;...</code></td></tr><tr><td style="text-align:center">tabindex</td><td style="text-align:center"><code>&lt;input tabindex=2 /&gt;</code></td><td style="text-align:center">tabIndex</td><td style="text-align:center"><code>&lt;input tabIndex={2} /&gt;</code></td></tr></tbody></table><br><br><h3>HTML vs Web API vs React JSX</h3><table><thead><tr><th style="text-align:center">Difference</th><th style="text-align:center">HTML</th><th style="text-align:center">Web API</th><th style="text-align:center">React JSX</th></tr></thead><tbody><tr><td style="text-align:center">Names of attributes / properties</td><td style="text-align:center">lower case</td><td style="text-align:center">(mostly) camelCase</td><td style="text-align:center"><strong>camelCase</strong></td></tr><tr><td style="text-align:center">Values of attributes / properties</td><td style="text-align:center">string</td><td style="text-align:center">expression</td><td style="text-align:center">expression within <code>{ }</code></td></tr><tr><td style="text-align:center">Names of event handlers (on…)</td><td style="text-align:center">lower case</td><td style="text-align:center">lower case (!)</td><td style="text-align:center"><strong>camelCase</strong></td></tr><tr><td style="text-align:center">Values of event handlers (on…)</td><td style="text-align:center">JavaScript string</td><td style="text-align:center">function expr.</td><td style="text-align:center">function expr. within <code>{ }</code></td></tr><tr><td style="text-align:center">Event Handlers: prevent default behaviour</td><td style="text-align:center">n/a</td><td style="text-align:center">can return <code>false</code></td><td style="text-align:center">must call <code>event.preventDefault();</code></td></tr><tr><td style="text-align:center">HTML Tags</td><td style="text-align:center">lower case</td><td style="text-align:center">n/a*</td><td style="text-align:center">lower case</td></tr><tr><td style="text-align:center">Custom Tags (Components)</td><td style="text-align:center">n/a</td><td style="text-align:center">n/a</td><td style="text-align:center">start with <strong>capital letter</strong></td></tr></tbody></table><br><br><h2>JSX 자식 정의</h2><hr><p>만약 태그가 비어있다면, XML 처럼 /&gt; 를 이용해 닫아주어야 합니다. (빈태그 문법)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;user.avatarUrl&#125;</span> /&gt;</span>;</span></span><br></pre></td></tr></table></figure><p>JSX 태그는 자식을 가질 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Hello!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    &lt;h2&gt;Good to see you here.&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><h2>JSX 인젝션 공격 예방</h2><hr><p>사용자가 입력한 내용을 JSX 내에 포함시켜도 안전합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> title = response.potentiallyMaliciousInput;</span><br><span class="line"><span class="comment">// This is safe:</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><p>기본적으로, React DOM 은 렌더링 되기 전에<br>JSX 내에 포함된 모든 값을 이스케이프 합니다.</p><p>따라서 어플리케이션에 명시적으로 작성되지 않은 내용은 절대 삽입할 수 없습니다.<br>모든 것은 렌더링 되기 전에 문자열로 변환됩니다.<br>이렇게 하면 XSS (cross-site-scripting) 공격을 막을 수 있습니다.</p><br><h2>JSX 객체 표현</h2><hr><p>Babel 은 JSX 를 React.createElement() 호출로 컴파일합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jsx</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">"greeting"</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> element = React.createElement(</span><br><span class="line">  <span class="string">"h1"</span>,</span><br><span class="line">  &#123; <span class="attr">className</span>: <span class="string">"greeting"</span> &#125;,</span><br><span class="line">  <span class="string">"Hello, world!"</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>React.createElement() 는 버그 없는 코드를 작성하는 데<br>도움을 주는 몇 가지 체크를 하긴 하지만,<br>기본적으로는 아래와 같은 객체를 생성합니다.<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Note: this structure is simplified</span></span><br><span class="line"><span class="keyword">const</span> element = &#123;</span><br><span class="line">  type: <span class="string">"h1"</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    className: <span class="string">"greeting"</span>,</span><br><span class="line">    children: <span class="string">"Hello, world"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이 객체를 “React 요소”라고 부릅니다.<br>화면에서 보고자 하는 내용에 대한 설명 내지 서술로 생각할 수 있습니다.<br>React 는 이 객체를 읽어들이고 이를 사용하여<br>DOM 을 만들어낸 뒤 최신 상태로 유지합니다.<br><br></p><p>팁 : ES6 및 JSX 코드가 모두 올바르게 표시되도록<br>선택한 편집기에 “Babel” 언어 설정 을 사용하는 것이 좋습니다.<br></p><br><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;JSX 란?&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;JSX 는 자바스크립트의 확장문법으로 JSX 를 리액트와 함께 사용하면&lt;br&gt;
UI 가 실제로 어떻게 보일지 서술할 수 있습니다.&lt;br&gt;
JSX 는 템플릿 언어처럼 보일 수 있지만 템플릿 언어는 아닙니다.&lt;b
      
    
    </summary>
    
      <category term="React" scheme="https://leekeunhwan.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://leekeunhwan.github.io/tags/React/"/>
    
      <category term="JSX" scheme="https://leekeunhwan.github.io/tags/JSX/"/>
    
  </entry>
  
  <entry>
    <title>React 16의 특징</title>
    <link href="https://leekeunhwan.github.io/2018/06/12/React16/"/>
    <id>https://leekeunhwan.github.io/2018/06/12/React16/</id>
    <published>2018-06-12T09:18:30.000Z</published>
    <updated>2018-07-31T08:57:58.692Z</updated>
    
    <content type="html"><![CDATA[<h2>How To Change Multiple JSX Elements Return</h2><p>기존에는 JSX Elements 를 Render 함에 있어서<br>한개의 JSX Elements 만 가능해서 div, span 태그로 감싸서<br>렌더링을 하곤 하였습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 이렇게 말이죠</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;h1&gt;hello world&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하지만 React 16 에서는 React.Fragment 를 지원합니다.<br>span 이나 div 로 감싸게 되는 경우에는 CSS 를 할 때<br>꼬이거나 뭔가 문제가 생길 가능성이 있는데<br>React.Fragment 태그를 사용하게 되면 기존 span 과 div 로<br>감쌀때처럼 잘 출력이 되면서도 문제가 생길 가능성이 많이 줄어들어<br>좋은 기능이라고 할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;React.Fragment&gt;</span><br><span class="line">        &lt;header /&gt;</span><br><span class="line">        &lt;div /&gt;</span><br><span class="line">        &lt;footer /&gt;</span><br><span class="line">      &lt;<span class="regexp">/React.Fragment&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><br><br><h2>Strings are returned.</h2><p>기존의 React 에서는 오직 return 할 수 있는 것이<br><code>Component</code> 아니면 <code>Null</code> 이였습니다.<br>하지만 React 16 부터는 아래처럼 string 을 return 할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringReturn</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;React.Fragment&gt;</span><br><span class="line">        &lt;StringReturn /&gt;</span><br><span class="line">      &lt;<span class="regexp">/React.Fragment&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ hello</span></span><br></pre></td></tr></table></figure><br><br><h2>portals</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>, document.getElementById("root"));</span></span><br></pre></td></tr></table></figure><p>portals 는 React root 밖에서 렌더를 할 때 사용할 수 있는 기능입니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>What is Portals?<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"here"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPortal &#125; <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Portals</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> createPortal(<span class="xml"><span class="tag">&lt;<span class="name">Message</span> /&gt;</span>, documents.getElementById("here"));</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">const Message = () =&gt; "This is Portals";</span></span><br></pre></td></tr></table></figure><p>portals 는 html 을 변경하지 못할 때 유용하게 사용될 수 있습니다.</p><br><br><h2>Error Boundaries</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorMaker</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    friends: [<span class="string">"jisu"</span>, <span class="string">"flynn"</span>, <span class="string">"daal"</span>, <span class="string">"kneeprayer"</span>]</span><br><span class="line">  &#125;;</span><br><span class="line">  componentDidMount = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        friends: <span class="literal">undefined</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; friends &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> friends.map(<span class="function"><span class="params">friend</span> =&gt;</span> <span class="string">` <span class="subst">$&#123;friend&#125;</span> `</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ErrorFallback = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">" Sorry something went wrong"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    hasError: <span class="literal">false</span></span><br><span class="line">  &#125;;</span><br><span class="line">  componentDidCatch = <span class="function">(<span class="params">error, info</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      hasError: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;React.Fragment&gt;</span><br><span class="line">        &#123;hasError ? <span class="xml"><span class="tag">&lt;<span class="name">ErrorFallback</span> /&gt;</span> : <span class="tag">&lt;<span class="name">ErrorMaker</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line"><span class="xml">    );</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>기존에는 에러가 발생하면 리액트 앱이 죽어버렸는데<br>React16 에서는 componentDidCatch 를 통해<br>컴포넌트가 에러를 캐치하면 기존에 정상적으로 작동하는 것들은 살려두고<br>에러에만 대응하는 모습을 볼 수 있습니다.</p><br><br><h2>Error Boundaries with Higher Order Components</h2><p>컴포넌트에서 에러를 잡는 것은 굉장히 매력적인 일이지만<br>JSX 엘리먼트가 많다면 에러를 잡기 위해 그 많은 코드에다가<br>일일히 삼항연산자로 에러를 잡는 코드를 만드는 것은 굉장히 비효율적입니다.<br>그래서 있는 것이 <code>HOC(고차 컴포넌트)</code> 입니다.</p><p>개발단에서만 에러가 발생시 보이므로 사용자 경험을 좋도록 할 수 있습니다.<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, Fragment &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createPortal &#125; <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BoundaryHOC = <span class="function"><span class="params">ProtectedComponent</span> =&gt;</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Boundary</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">      hasError: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">    componentDidCatch = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        hasError: <span class="literal">true</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; hasError &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">      <span class="keyword">if</span> (hasError) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ErrorFallback</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">      &#125; else &#123;</span></span><br><span class="line"><span class="xml">        return <span class="tag">&lt;<span class="name">ProtectedComponent</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">class ErrorMaker extends Component &#123;</span></span><br><span class="line"><span class="xml">  state = &#123;</span></span><br><span class="line"><span class="xml">    friends: ["jisu", "flynn", "daal", "kneeprayer"]</span></span><br><span class="line"><span class="xml">  &#125;;</span></span><br><span class="line"><span class="xml">  componentDidMount = () =&gt; &#123;</span></span><br><span class="line"><span class="xml">    setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="xml">      this.setState(&#123;</span></span><br><span class="line"><span class="xml">        friends: undefined</span></span><br><span class="line"><span class="xml">      &#125;);</span></span><br><span class="line"><span class="xml">    &#125;, 2000);</span></span><br><span class="line"><span class="xml">  &#125;;</span></span><br><span class="line"><span class="xml">  render() &#123;</span></span><br><span class="line"><span class="xml">    const &#123; friends &#125; = this.state;</span></span><br><span class="line"><span class="xml">    return friends.map(friend =&gt; ` $&#123;friend&#125; `);</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">const PErrorMaker = BoundaryHOC(ErrorMaker);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">class Portals extends Component &#123;</span></span><br><span class="line"><span class="xml">  render() &#123;</span></span><br><span class="line"><span class="xml">    return createPortal(<span class="tag">&lt;<span class="name">Message</span> /&gt;</span>, document.getElementById("touchme"));</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">const PPortals = BoundaryHOC(Portals);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">const Message = () =&gt; "Just touched it!";</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">class ReturnTypes extends Component &#123;</span></span><br><span class="line"><span class="xml">  render() &#123;</span></span><br><span class="line"><span class="xml">    return "hello";</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">const ErrorFallback = () =&gt; "Sorry something went wrong";</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">class App extends Component &#123;</span></span><br><span class="line"><span class="xml">  render() &#123;</span></span><br><span class="line"><span class="xml">    return (</span></span><br><span class="line">      &lt;Fragment&gt;</span><br><span class="line">        &lt;ReturnTypes /&gt;</span><br><span class="line">        &lt;PPortals /&gt;</span><br><span class="line">        &lt;PErrorMaker /&gt;</span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line"><span class="xml">    );</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export default BoundaryHOC(App);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;How To Change Multiple JSX Elements Return&lt;/h2&gt;
&lt;p&gt;기존에는 JSX Elements 를 Render 함에 있어서&lt;br&gt;
한개의 JSX Elements 만 가능해서 div, span 태그로 감싸서&lt;br&gt;
렌
      
    
    </summary>
    
      <category term="React" scheme="https://leekeunhwan.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://leekeunhwan.github.io/tags/React/"/>
    
      <category term="React16" scheme="https://leekeunhwan.github.io/tags/React16/"/>
    
  </entry>
  
</feed>
